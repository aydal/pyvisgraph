# -*- coding: utf-8 -*-
"""Copy of mercatorvisv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bJGwamedLK2k2p7CgqUdW7s84P6PIgfQ
"""


from shapely.geometry import Polygon,Point,LineString
import os
os.environ['MAPBOX_ACCESS_TOKEN']="pk.eyJ1IjoidmliaHUxOTk0NiIsImEiOiJjam01MjB1YjkwMDZrM3BsMHI4d21reXduIn0.j1yPdjaTrJ1i4Uc_dcT62g"
import pandas as pd
import numpy as np
from mapbox import Datasets
import matplotlib.pyplot as plt
import json
import sys
import geopandas as gpd
import descartes
from pandas.io.json import json_normalize
import pyvisgraph as vg

datasets=Datasets()
col = datasets.list_features("ck5gcnyor0rcw2nmdwaeaiko9").json()
#attrs = datasets.read_dataset("ck6ub6amu0h6g2nlhtl42fguy").json()
df=pd.read_json(json.dumps(col['features']))
#df.head()

#nycc = json_normalize(df['properties'])
nyc= json_normalize(df['geometry'])
#len(nycc.index) #== len(nyc.index)
#nyc.head()

pp=[]
for i in nyc.index:   
  for ff in nyc['coordinates'][i]:
    pp.append(Polygon(ff))

f = pd.DataFrame(pp)
crs={'init':'epsg:4326'}
geo_df = gpd.GeoDataFrame(f,crs=crs,geometry=pp)

#axx = geo_df.plot(facecolor='gray')

data_proj = geo_df.to_crs(epsg=3395) # 3395 - mercator
#data_proj.plot()
#data_proj.to_csv('/content/gdrive/My Drive/poly.csv')

#data_proj.head()

tmp = []
for polys in data_proj['geometry'] :
  tmp.append(Polygon(polys))

len(tmp)

collectn=[]
ff = tmp[::2]
for poly in ff :
  jjm=[]
  for (x,y) in poly.exterior.coords:
    jjm.append(vg.Point(x,y))
  collectn.append(jjm)
ff=tmp[1::2]
for poly in ff:
  for (x,y) in poly.exterior.coords:
    collectn.append([vg.Point(x,y)])


#drive.mount('/content/gdrive')
g = vg.VisGraph()
#g.load('/content/gdrive/My Drive/graphq.pk1')
g.build(collectn)
#g.save('graphbhopal.pk1')
#files.download('graphbhopal.pk1')

import pyproj
p= pyproj.Proj('EPSG:3395')
([min_x,max_x],[min_y,max_y]) = p([77.350,77.425],[23.22,23.28])

shortest = g.shortest_path(vg.Point(min_x,min_y), vg.Point(max_x, max_y), weighted_poly=ff)
lat, lon = p([pt.x for pt in shortest],[pt.y for pt in shortest],inverse=True)
path = zip(lat,lon)
print(path)

checkk=data_proj[::2]

fig, ax = plt.subplots()
obs_df=data_proj[::2]
weight_df = data_proj[1::2]
obs_df.plot(ax=ax, facecolor='red');
weight_df.plot(ax=ax, facecolor='blue');
plt.plot([pt.x for pt in shortest],[pt.y for pt in shortest],color='g')
plt.show()